import os
import random
import time
import tkinter as tk
from tkinter import scrolledtext, messagebox, ttk, filedialog
from PIL import Image, ImageDraw, ImageFont, ImageTk
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
import webbrowser
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from fpdf import FPDF
import speech_recognition as sr
import threading
from transformers import pipeline

# Suppress macOS warnings
os.environ['XPC_SERVICE_NAME'] = '0'

class MentalHealthAIBot:
    def __init__(self, root):
        self.root = root
        self.root.title("SoulSupport â€“ A digital friend for mental wellness")
        self.root.geometry("1400x900")
        self.style = ttk.Style(theme='minty')
        self.depression_score = 0
        self.current_question = 0
        self.diagnosis_active = False
        self.user_responses = []
        self.recognizer = sr.Recognizer()
        self.conversation_history = []

        # AI Chatbot Setup
        self.chatbot = pipeline(
            "conversational",
            model="facebook/blenderbot-400M-distill",
            device=-1
        )

        # Crisis keywords
        self.crisis_keywords = {
            'suicide', 'kill myself', 'end it all',
            'self harm', 'want to die'
        }

        # GUI Setup
        self.create_widgets()
        self.show_typing_indicator("Welcome to SoulSupport â€“ A digital friend for mental wellness ðŸ¤–\nHow can I assist you today?")

        # Diagnosis questions
        self.diagnosis_questions = [
            "How often do you feel sad or hopeless? (1: Never - 5: Always)",
            "How would you rate your sleep quality? (1: Excellent - 5: Very Poor)",
            "How is your appetite recently? (1: Normal - 5: No Appetite)",
            "Do you have trouble concentrating? (1: Never - 5: Always)",
            "How often do you feel fatigued? (1: Never - 5: Always)"
        ]

    def create_widgets(self):
        main_paned = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        main_paned.pack(fill=tk.BOTH, expand=True)

        left_frame = ttk.Frame(main_paned)
        main_paned.add(left_frame, weight=3)

        right_frame = ttk.Frame(main_paned)
        main_paned.add(right_frame, weight=1)

        header_frame = ttk.Frame(left_frame)
        header_frame.pack(fill=tk.X, pady=10)

        self.logo = self.load_image("ðŸ§ ", size=40)
        ttk.Label(header_frame, image=self.logo).pack(side=tk.LEFT, padx=10)
        ttk.Label(header_frame, text="SoulSupport â€“ A digital friend for mental wellness",
                  font=('Arial', 18, 'bold')).pack(side=tk.LEFT)

        self.viz_frame = ttk.Frame(left_frame)
        self.viz_frame.pack(fill=tk.BOTH, expand=True, pady=10)

        self.chat_history = scrolledtext.ScrolledText(
            left_frame,
            wrap=tk.WORD,
            state='disabled',
            font=('Arial', 12),
            background='#ffffff',
            padx=15,
            pady=15
        )
        self.chat_history.pack(fill=tk.BOTH, expand=True, pady=10)

        input_frame = ttk.Frame(left_frame)
        input_frame.pack(fill=tk.X, pady=10)

        self.user_input = ttk.Entry(
            input_frame,
            font=('Arial', 14),
            bootstyle='primary'
        )
        self.user_input.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
        self.user_input.bind("<Return>", self.process_input)

        ttk.Button(
            input_frame,
            text="ðŸŽ¤ Speak",
            command=self.start_voice_recognition,
            bootstyle='info'
        ).pack(side=tk.LEFT, padx=5)

        ttk.Button(
            input_frame,
            text="Send",
            command=self.process_input,
            bootstyle='success'
        ).pack(side=tk.LEFT, padx=5)

    def show_typing_indicator(self, message):
        self.chat_history.configure(state='normal')
        self.chat_history.insert(tk.END, "ðŸ¤– Bot is typing...\n")
        self.chat_history.see(tk.END)
        self.chat_history.configure(state='disabled')
        self.root.after(1500, lambda: self.update_message(message))

    def update_message(self, message):
        self.chat_history.configure(state='normal')
        self.chat_history.delete("end-2l", "end-1c")
        self.chat_history.insert(tk.END, f"ðŸ¤– Bot: {message}\n\n")
        self.chat_history.configure(state='disabled')
        self.chat_history.see(tk.END)

    def show_message(self, sender, message):
        self.chat_history.configure(state='normal')
        self.chat_history.insert(tk.END, f"{sender}: {message}\n\n")
        self.chat_history.configure(state='disabled')
        self.chat_history.see(tk.END)

    def process_input(self, event=None):
        user_text = self.user_input.get()
        if not user_text:
            return

        self.show_message("You", user_text)
        self.user_input.delete(0, tk.END)

        if self.diagnosis_active:
            self.handle_diagnosis(user_text)
        else:
            self.handle_basic_response(user_text)

    def handle_basic_response(self, user_input):
        if any(keyword in user_input.lower() for keyword in self.crisis_keywords):
            crisis_msg = """ðŸš¨ Immediate Help Resources:
            - National Suicide Prevention Lifeline: 1-800-273-TALK (8255)
            - Crisis Text Line: Text 'HELLO' to 741741
            - Please reach out to a trusted person or professional"""
            self.show_typing_indicator(crisis_msg)
            return

        try:
            # Manage conversation history manually
            self.conversation_history.append(user_input)
            ai_response = self.chatbot(" ".join(self.conversation_history))
            ai_response = ai_response[0]['generated_text']
            ai_response = self.filter_response(ai_response)
        except Exception as e:
            ai_response = "I'm here to listen. Could you share more about how you're feeling?"

        self.show_typing_indicator(ai_response)

    def filter_response(self, text):
        blocked_phrases = {
            'as an AI', 'I cannot', 'I am sorry',
            'I am not qualified', 'I am just a'
        }
        return ' '.join([word for word in text.split()
                         if word.lower() not in blocked_phrases])

    def start_diagnosis(self):
        self.diagnosis_active = True
        self.depression_score = 0
        self.current_question = 0
        self.user_responses = []
        self.show_typing_indicator(self.diagnosis_questions[self.current_question])

    def handle_diagnosis(self, answer):
        try:
            score = int(answer)
            if 1 <= score <= 5:
                self.user_responses.append(score)
                self.depression_score += score
                self.current_question += 1

                if self.current_question < len(self.diagnosis_questions):
                    self.show_typing_indicator(self.diagnosis_questions[self.current_question])
                else:
                    self.show_results()
            else:
                self.show_typing_indicator("Please enter a number between 1-5")
        except ValueError:
            self.show_typing_indicator("Please enter a valid number")

    def show_results(self):
        total = self.depression_score
        if total <= 10:
            msg = "ðŸŒ¼ Mild Symptoms: Practice self-care!"
        elif total <= 15:
            msg = "ðŸ“ž Moderate Symptoms: Consider professional help"
        else:
            msg = "ðŸš¨ Severe Symptoms: Immediate consultation recommended"

        msg += f"\n\nYour score: {total}/25"
        self.show_typing_indicator(msg)
        self.diagnosis_active = False

    def start_voice_recognition(self):
        def recognition_thread():
            try:
                with sr.Microphone() as source:
                    self.show_message("Bot", "ðŸŽ¤ Listening... Speak now")
                    self.recognizer.adjust_for_ambient_noise(source)
                    audio = self.recognizer.listen(source, timeout=5)
                    
                    text = self.recognizer.recognize_google(audio)
                    self.user_input.delete(0, tk.END)
                    self.user_input.insert(0, text)
                    self.process_input()
            except Exception as e:
                self.show_message("Bot", "Sorry, I couldn't understand your speech.")

        threading.Thread(target=recognition_thread, daemon=True).start()
